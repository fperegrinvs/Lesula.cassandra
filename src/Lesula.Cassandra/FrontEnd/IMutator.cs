using System;
using System.Collections.Generic;
using Apache.Cassandra;

namespace Lesula.Cassandra.FrontEnd
{
    public interface IMutator
    {
        Mutator DeleteColumn(string colFamily, string rowKey, string colName);
        Mutator DeleteColumn(string colFamily, string rowKey, byte[] colName);
        Mutator DeleteColumn(string colFamily, byte[] rowKey, byte[] colName);
        Mutator DeleteColumns(string colFamily, string rowKey, params byte[][] colNames);
        Mutator DeleteColumns(string colFamily, string rowKey, List<string> colNames);
        Mutator DeleteColumns(string colFamily, byte[] rowKey, string[] colNames);
        Mutator DeleteColumns(string colFamily, string rowKey, List<byte[]> colNames);
        Mutator DeleteColumns(string colFamily, byte[] rowKey, List<string> colNames);
        Mutator DeleteColumns(string colFamily, byte[] rowKey, List<byte[]> colNames);
        Mutator DeleteSubColumn(string colFamily, string rowKey, string colName, string subColName);
        Mutator DeleteSubColumn(string colFamily, string rowKey, byte[] colName, string subColName);
        Mutator DeleteSubColumn(string colFamily, string rowKey, string colName, byte[] subColName);
        Mutator DeleteSubColumn(string colFamily, string rowKey, byte[] colName, byte[] subColName);
        Mutator DeleteSubColumn(string colFamily, byte[] rowKey, byte[] colName, byte[] subColName);
        Mutator DeleteSubColumns(string colFamily, string rowKey, string colName);
        Mutator DeleteSubColumns(string colFamily, string rowKey, byte[] colName);
        Mutator DeleteSubColumns(string colFamily, string rowKey, byte[] colName, List<string> subColNames);
        Mutator DeleteSubColumns(string colFamily, string rowKey, string colName, List<byte[]> subColNames);
        Mutator DeleteSubColumns(string colFamily, string rowKey, string colName, List<string> subColNames);
        Mutator DeleteSubColumns(string colFamily, string rowKey, byte[] colName, List<byte[]> subColNames);
        Mutator DeleteSubColumns(string colFamily, byte[] rowKey, byte[] colName, List<string> subColNames);
        Mutator DeleteSubColumns(string colFamily, byte[] rowKey, byte[] colName, List<byte[]> subColNames);
        void Execute(ConsistencyLevel consistencyLevel);
        Dictionary<byte[], Dictionary<string, List<Mutation>>> ExecuteDebug(ConsistencyLevel consistencyLevel);
        byte[] GetMutationTimestamp(bool microsToMillis);
        long GetMutationTimestampValue();
        void InsertColumn(string colFamily, ulong rowKey, Column column, ConsistencyLevel clevel);
        void InsertColumn(string colFamily, string rowKey, Column column, ConsistencyLevel clevel);
        void InsertColumn(string colFamily, byte[] rowKey, Column column, ConsistencyLevel clevel);
        Column NewColumn(string colName);
        Column NewColumn(byte[] colName);
        Column NewColumn(string colName, double colValue);
        Column NewColumn(string colName, Guid? colValue);
        Column NewColumn(string colName, int colValue);
        Column NewColumn(string colName, long colValue);
        Column NewColumn(string colName, string colValue);
        Column NewColumn(string colName, uint colValue);
        Column NewColumn(string colName, ulong colValue);
        Column NewColumn(string colName, Guid colValue);
        Column NewColumn(Guid colName, string colValue);
        Column NewColumn(string colName, bool colValue);
        Column NewColumn(string colName, bool? colValue);
        Column NewColumn(string colName, byte[] colValue);
        Column NewColumn(string colName, DateTime colValue);
        Column NewColumn(byte[] colName, string colValue);
        Column NewColumn(byte[] colName, byte[] colValue);
        Column NewColumn(byte colName, DateTime colValue);
        Column NewColumn(string colName, byte[] colValue, int ttl);
        Column NewColumn(string colName, string colValue, int ttl);
        Column NewColumn(byte[] colName, string colValue, int ttl);
        Column NewColumn(byte[] colName, byte[] colValue, int ttl);
        List<Column> NewColumnList(params Column[] columns);
        CounterColumn NewCounterColumn(string colName, long value);
        CounterColumn NewCounterColumn(byte[] colName, long value);
        Mutator WriteColumn(string colFamily, ulong rowKey, Column column);
        Mutator WriteColumn(string colFamily, Guid rowKey, Column column);
        Mutator WriteColumn(string colFamily, string rowKey, Column column);
        Mutator WriteColumn(string colFamily, byte[] rowKey, Column column);
        Mutator WriteColumn(string colFamily, byte[] rowKey, Column column, bool deleteIfNullValue);
        Mutator WriteColumns(string colFamily, ulong rowKey, List<Column> columns);
        Mutator WriteColumns(string colFamily, Guid rowKey, List<Column> columns);
        Mutator WriteColumns(string colFamily, string rowKey, List<Column> columns);
        Mutator WriteColumns(string colFamily, byte[] rowKey, List<Column> columns);
        Mutator WriteColumns(string colFamily, byte[] rowKey, List<Column> columns, bool deleteIfNullValue);
        Mutator WriteCounterColumn(string colFamily, byte[] rowKey, CounterColumn column);
        Mutator WriteCounterColumn(string colFamily, ulong key, string colName, long value);
        Mutator WriteCounterColumn(string colFamily, string key, string colName, long value);
        Mutator WriteCounterColumn(string colFamily, string key, ulong colName, long value);
        Mutator WriteCounterColumn(string colFamily, int key, string colName, long value);
        Mutator WriteCounterColumn(string colFamily, int key, Guid colName, long value);
        Mutator WriteCounterColumn(string colFamily, byte[] rowKey, byte[] colName, long value);
        Mutator WriteCounterColumns(string colFamily, byte[] rowKey, List<CounterColumn> columns);
        Mutator WriteSubColumn(string colFamily, string rowKey, string colName, Column subColumn);
        Mutator WriteSubColumn(string colFamily, string rowKey, byte[] colName, Column subColumn);
        Mutator WriteSubColumn(string colFamily, Guid rowKey, string colName, Column subColumn);
        Mutator WriteSubColumn(string colFamily, byte[] rowKey, byte[] colName, Column subColumn);
        Mutator WriteSubColumns(string colFamily, string rowKey, byte[] colName, List<Column> subColumns);
        Mutator WriteSubColumns(string colFamily, string rowKey, Guid colName, List<Column> subColumns);
        Mutator WriteSubColumns(string colFamily, string rowKey, string colName, List<Column> subColumns);
        Mutator WriteSubColumns(string colFamily, Guid rowKey, string colName, List<Column> subColumns);
        Mutator WriteSubColumns(string colFamily, byte[] rowKey, byte[] colName, List<Column> subColumns);
        Mutator WriteSubColumns(string colFamily, byte[] rowKey, byte[] colName, List<Column> subColumns, bool deleteIfNullValue);
        Mutator WriteSubCounterColumn(string colFamily, byte[] rowKey, byte[] colName, CounterColumn subColumn);
        Mutator WriteSubCounterColumns(string colFamily, byte[] rowKey, byte[] colName, List<CounterColumn> subColumns);
    }
}